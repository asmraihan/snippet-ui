{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../env.mjs", "../../../lib/rehype-component.ts", "../../../registry/index.tsx"],
  "sourcesContent": ["// contentlayer.config.ts\nimport {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from \"contentlayer/source-files\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\nimport rehypePrettyCode from \"rehype-pretty-code\";\nimport rehypeSlug from \"rehype-slug\";\nimport remarkGfm from \"remark-gfm\";\nimport { BlogPosting, WithContext } from \"schema-dts\";\nimport { visit } from \"unist-util-visit\";\nimport { env } from \"./env.mjs\";\nimport { rehypeComponent } from \"./lib/rehype-component\";\n\n/** @type {import('contentlayer/source-files').ComputedFields} */\nconst computedFields = {\n  url: {\n    type: \"string\",\n    resolve: (post: any) => `/${post._raw.flattenedPath}`,\n  },\n  image: {\n    type: \"string\",\n    resolve: (post: any) =>\n      `${env.NEXT_PUBLIC_APP_URL}/api/og?title=${encodeURI(post.title)}`,\n  },\n  slug: {\n    type: \"string\",\n    resolve: (doc: any) => `/${doc._raw.flattenedPath}`,\n  },\n  slugAsParams: {\n    type: \"string\",\n    resolve: (doc: any) => doc._raw.flattenedPath.split(\"/\").slice(1).join(\"/\"),\n  },\n  structuredData: {\n    type: \"json\",\n    resolve: (doc: any) =>\n      ({\n        \"@context\": \"https://schema.org\",\n        \"@type\": `BlogPosting`,\n        headline: doc.title,\n        datePublished: doc.date,\n        dateModified: doc.date,\n        description: doc.summary,\n        image: doc.image,\n        url: `https://magicui.design/${doc._raw.flattenedPath}`,\n        author: {\n          \"@type\": \"Person\",\n          name: doc.author,\n          url: `https://twitter.com/${doc.author}`,\n        },\n      }) as WithContext<BlogPosting>,\n  },\n};\n\nexport const Page = defineDocumentType(() => ({\n  name: \"Page\",\n  filePathPattern: `pages/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n    },\n  },\n  // @ts-ignore\n  computedFields,\n}));\n\nconst LinksProperties = defineNestedType(() => ({\n  name: \"LinksProperties\",\n  fields: {\n    doc: {\n      type: \"string\",\n    },\n    api: {\n      type: \"string\",\n    },\n  },\n}));\n\nexport const Doc = defineDocumentType(() => ({\n  name: \"Doc\",\n  filePathPattern: `docs/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    description: {\n      type: \"string\",\n      required: true,\n    },\n    date: { type: \"date\", required: false },\n    published: {\n      type: \"boolean\",\n      default: true,\n    },\n    links: {\n      type: \"nested\",\n      of: LinksProperties,\n    },\n    featured: {\n      type: \"boolean\",\n      default: false,\n      required: false,\n    },\n    toc: { type: \"boolean\", default: true, required: false },\n    author: { type: \"string\", required: false },\n    video: { type: \"string\", required: false },\n  },\n  // @ts-ignore\n  computedFields,\n}));\n\nexport default makeSource({\n  contentDirPath: \"./content\",\n  documentTypes: [Page, Doc],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      rehypeComponent,\n      () => (tree) => {\n        visit(tree, (node) => {\n          if (node?.type === \"element\" && node?.tagName === \"pre\") {\n            const [codeEl] = node.children;\n            if (codeEl.tagName !== \"code\") {\n              return;\n            }\n\n            if (codeEl.data?.meta) {\n              // Extract event from meta and pass it down the tree.\n              const regex = /event=\"([^\"]*)\"/;\n              const match = codeEl.data?.meta.match(regex);\n              if (match) {\n                node.__event__ = match ? match[1] : null;\n                codeEl.data.meta = codeEl.data.meta.replace(regex, \"\");\n              }\n            }\n\n            node.__rawString__ = codeEl.children?.[0].value;\n            node.__src__ = node.properties?.__src__;\n            node.__style__ = node.properties?.__style__;\n          }\n        });\n      },\n      [\n        rehypePrettyCode,\n        {\n          theme: \"material-theme-palenight\",\n          //   light: \"material-theme-lighter\",\n          // },\n          onVisitLine(node: any) {\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\n            // lines to be copy/pasted\n            if (node.children.length === 0) {\n              node.children = [{ type: \"text\", value: \" \" }];\n            }\n          },\n          // keepBackground: true,\n          onVisitHighlightedLine(node: any) {\n            node.properties.className.push(\"line--highlighted\");\n          },\n          onVisitHighlightedWord(node: any) {\n            node.properties.className = [\"word--highlighted\"];\n          },\n        },\n      ],\n      () => (tree) => {\n        visit(tree, (node) => {\n          if (node?.type === \"element\" && node?.tagName === \"div\") {\n            if (!(\"data-rehype-pretty-code-fragment\" in node.properties)) {\n              return;\n            }\n\n            const preElement = node.children.at(-1);\n            if (preElement.tagName !== \"pre\") {\n              return;\n            }\n\n            preElement.properties[\"__withMeta__\"] =\n              node.children.at(0).tagName === \"div\";\n            preElement.properties[\"__rawString__\"] = node.__rawString__;\n\n            if (node.__src__) {\n              preElement.properties[\"__src__\"] = node.__src__;\n            }\n\n            if (node.__event__) {\n              preElement.properties[\"__event__\"] = node.__event__;\n            }\n\n            if (node.__style__) {\n              preElement.properties[\"__style__\"] = node.__style__;\n            }\n          }\n        });\n      },\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: [\"anchor\"],\n            ariaLabel: \"Link to section\",\n          },\n        },\n      ],\n    ],\n  },\n});\n", "import { createEnv } from \"@t3-oss/env-nextjs\";\nimport { z } from \"zod\";\n\nexport const env = createEnv({\n  /*\n   * Serverside Environment variables, not available on the client.\n   * Will throw if you access these variables on the client.\n   */\n  server: {},\n  /*\n   * Environment variables available on the client (and server).\n   *\n   * \uD83D\uDCA1 You'll get type errors if these are not prefixed with NEXT_PUBLIC_.\n   */\n  client: {\n    NEXT_PUBLIC_APP_URL: z.string().min(1),\n  },\n\n  /*\n   * Due to how Next.js bundles environment variables on Edge and Client,\n   * we need to manually destructure them to make sure all are included in bundle.\n   *\n   * \uD83D\uDCA1 You'll get type errors if not all variables from `server` & `client` are included here.\n   */\n  runtimeEnv: {\n    NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,\n  },\n});\n", "import { UnistNode, UnistTree } from \"@/types/unist\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { u } from \"unist-builder\";\nimport { visit } from \"unist-util-visit\";\nimport { registry } from \"../registry\";\n// import { styles } from \"../registry/styles\"\n\nexport function rehypeComponent() {\n  return async (tree: UnistTree) => {\n    visit(tree, (node: UnistNode) => {\n      const { value: src } = getNodeAttributeByName(node, \"src\") || {};\n\n      if (node.name === \"ComponentSource\") {\n        const name = getNodeAttributeByName(node, \"name\")?.value as string;\n\n        if (!name) {\n          return null;\n        }\n\n        try {\n          // for (const style of styles) {\n          const component = registry[name];\n          const src = component.files[0];\n\n          // Read the source file.\n          const filePath = path.join(process.cwd(), src);\n          let source = fs.readFileSync(filePath, \"utf8\");\n\n          // Replace imports.\n          // TODO: Use @swc/core and a visitor to replace this.\n          // For now a simple regex should do.\n          source = source.replaceAll(`@/registry/`, \"@/\");\n          // source = source.replaceAll(\"export default\", \"export\");\n\n          // Add code as children so that rehype can take over at build time.\n          node.children?.push(\n            u(\"element\", {\n              tagName: \"pre\",\n              properties: {\n                __src__: src,\n              },\n              // attributes: [\n              //   {\n              //     name: \"styleName\",\n              //     type: \"mdxJsxAttribute\",\n              //     value: style.name,\n              //   },\n              // ],\n              children: [\n                u(\"element\", {\n                  tagName: \"code\",\n                  properties: {\n                    className: [\"language-tsx\"],\n                  },\n                  data: {\n                    meta: `event=\"copy_source_code\"`,\n                  },\n                  children: [\n                    {\n                      type: \"text\",\n                      value: source,\n                    },\n                  ],\n                }),\n              ],\n            }),\n          );\n          // }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n\n      if (node.name === \"ComponentPreview\" || node.name === \"BlockPreview\") {\n        const name = getNodeAttributeByName(node, \"name\")?.value as string;\n\n        if (!name) {\n          return null;\n        }\n\n        try {\n          // for (const style of styles) {\n          const component = registry[name];\n          const src = component.files[0];\n\n          // Read the source file.\n          const filePath = path.join(process.cwd(), src);\n          let source = fs.readFileSync(filePath, \"utf8\");\n\n          // console.log(\"name \", name);\n          // console.log(\"source \", source);\n\n          // Replace imports.\n          // TODO: Use @swc/core and a visitor to replace this.\n          // For now a simple regex should do.\n          source = source.replaceAll(`@/registry/`, \"@/\");\n          source = source.replaceAll(\"export default\", \"export\");\n\n          // Add code as children so that rehype can take over at build time.\n          node.children?.push(\n            u(\"element\", {\n              tagName: \"pre\",\n              properties: {\n                __src__: src,\n              },\n              children: [\n                u(\"element\", {\n                  tagName: \"code\",\n                  properties: {\n                    className: [\"language-tsx\"],\n                  },\n                  data: {\n                    meta: `event=\"copy_usage_code\"`,\n                  },\n                  children: [\n                    {\n                      type: \"text\",\n                      value: source,\n                    },\n                  ],\n                }),\n              ],\n            }),\n          );\n          // }\n        } catch (error) {\n          console.error(error);\n        }\n      }\n    });\n  };\n}\n\nfunction getNodeAttributeByName(node: UnistNode, name: string) {\n  return node.attributes?.find((attribute) => attribute.name === name);\n}\n\n// function getComponentSourceFileContent(node: UnistNode) {\n//   const src = getNodeAttributeByName(node, \"src\")?.value as string;\n\n//   if (!src) {\n//     return null;\n//   }\n\n//   // Read the source file.\n//   const filePath = path.join(process.cwd(), src);\n//   const source = fs.readFileSync(filePath, \"utf8\");\n\n//   return source;\n// }\n", "import { Registry } from \"@/registry/schema\";\nimport * as React from \"react\";\n\nconst ui: Registry = {\n\n  globe: {\n    name: \"globe\",\n    type: \"components:ui\",\n    files: [\"registry/components/snippet/globe.tsx\"],\n  },\n};\n\nconst demo: Registry = {\n  \"globe-demo\": {\n    name: \"globe-demo\",\n    type: \"components:demo\",\n    files: [\"registry/components/demo/globe-demo.tsx\"],\n    component: React.lazy(\n      () => import(\"@/registry/components/demo/globe-demo\"),\n    ),\n  }\n};\nexport const registry: Registry = {\n  ...ui,\n  ...demo,\n};\n"],
  "mappings": "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",
  "names": ["visit", "src", "visit"]
}
